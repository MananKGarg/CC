Algorithm using numpy

--> Firstly, we should create a dataset. We can generate random data X and y using Numpy and plot it.

                             #Getting dataset
                             point = 100
                             X = np.linspace(-3, 3, points)
                             np.random.seed(6)
                             y = np.sin(X) + np.random.uniform(-0.5, 0.5, points)
                             
                             p = plt.plot(X, y, 'ro')
                             plt.axis([-4, 4, -2.0, 2.0])
                             plt.show()
                             
Now, we have X and y values so now we woill generate random weights (a0, a1, a2....)
                            
                            X.shape #X.shape[0] = 100, X.shape[1] has no value we get out of range error if we access
                            
                            X2 = np.c_[np.ones(len(X)),X] #this concatenates 1 to all X values ex: [1,-3] , [1,-2.87] etc.
                            print(X2.shape)
                            W = np.random.uniform( size = X2.shape[1])
                            print(W)
                            
Now, we have got a0 and a1 values, now we have to predict y values from our data set

  y = a0 + a1*x
  
                            def predict():
                                X2.dot(W)
                                
                            predictedY = predict()
                            print(predictedY[:5]) #first 5 predicted values printing
                            
Above code does matrix multiplication same as y = a0*x0 + a1*x1 (x0 = 1, x1 = our first X value in dataset). Dot operation 
is used for matrix multiplication.

Next step is to calculate error and minimise it (Gradient Descent)

error = (predicted - actual)**2, to minimise the error we need to find derivatives(gradients) for weights (a) values and 
update them as we reach the minimum value.

                            def GD(lrate, epochs)
                                total_expected_error = 0
                                errorlist[]
                                finalepoch = 0
                                for i in range(epochs):
                                    global W
                                    
                                    predictedY = predict()
                                    error = (predictedY - y)**2
                                    total_error = np.sum(error)
                                    
                                    gradient = X2.T.dot(error)/X2.shape[0] # d/da = error*x.T(transpose to get a vector as a
                                                                             result from matrix multiplication
                                                                           #X.shape[0] = size of X (m in GD equation)
                                                                           
                                    if i%100 == 0:
                                        errorlist.append(total_error)
                                        finalepoch += 1
                                        
                                    if np.abs( total_expected_error - total_error) < 0.0005: #to break when we reach the 
                                        return errorlist, finalepoch                          minimum or avoid overshooting
                                    total_expected_error = total_error                        weights.
                                    
                                    W += lrate*gradient #new weight = old weight - alpha*change weight
                                return errorlist,finalepoch    
                                    
After iterating by a number of epochs, we get the final weights (best fit line for our data)

                                plt.plot(X,y,'ro')
                                plt.plot(X.predict(),'b') #prediction y values (blue line)
                                plt.show()
                                
That completes the code. next we just have to predict the new data by calling the predict() function (Weights w are final 
weights) by giving the set of test data
                                
                                    
                                    
                                    

















































